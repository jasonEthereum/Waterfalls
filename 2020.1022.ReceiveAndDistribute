
  
pragma solidity >=0.4.22 <0.6.0;

/* In this simple example, there are two partners. 
The contract will first receive funds. 
Funds received are added to the partners respective capital accounts. 

We can check the balance held in the contract with the checkBalance function
Distributions will be made by calling the makeDistributions function.  */

contract ReceiveAndDistribute {
address owner;

uint256 Partner1Share = 10;
uint256 Partner2Share = 90;

uint256 Partner1CapitalAccount = 0;
uint256 Partner2CapitalAccount = 0;

uint256 CumulativeReceivedBalance = 0;
uint256 CumulativePaidOutBalance = 0;

uint256 units = 100;

address payable  Partner1 = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;
address payable  Partner2 = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;

    constructor() public{
        owner = msg.sender;
    }

    //This contract will receive payments from anyone
    function a_receivePmts() payable external {
        CumulativeReceivedBalance += msg.value;
        Partner1CapitalAccount += msg.value * Partner1Share / units;
        Partner2CapitalAccount += msg.value * Partner2Share / units;
    }

    //This pays out all partners
    function b_makeDistributions() payable public {
        distrib2P1() ;
        distrib2P2() ;
    }


    //This makes distributions to Partner 1
    function distrib2P1() payable public {
        CumulativePaidOutBalance += Partner1CapitalAccount;
        Partner1.transfer(Partner1CapitalAccount);  
        Partner1CapitalAccount = 0;
    }

    //This makes distributions to Partner 2
    function distrib2P2() payable public {
        CumulativePaidOutBalance +=   Partner2CapitalAccount;
        Partner2.transfer(Partner2CapitalAccount);  
        Partner2CapitalAccount = 0;
    }



    //For testing, it's useful to display account balances
    function displayItems() external view returns (string memory, string memory, string memory, string memory, string memory) {
        return (
            string(abi.encodePacked("Contract balance:      ",uint2str(address(this).balance))), 
            string(abi.encodePacked("CumulReceivedBal:      ",uint2str(CumulativeReceivedBalance))),
            string(abi.encodePacked("CumulPaidOutBal:       ",uint2str(CumulativePaidOutBalance))),
            string(abi.encodePacked("Ptnr1CapAcct:          ",uint2str(Partner1CapitalAccount))),
            string(abi.encodePacked("Ptn21CapAcct:          ",uint2str(Partner2CapitalAccount)))
            );
    } 


    //converts numbers to strings:
     function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
        if (_i == 0) {
            return "0";
        }
        uint j = _i;
        uint len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (_i != 0) {
            bstr[k--] = byte(uint8(48 + _i % 10));
            _i /= 10;
        }
        return string(bstr);
    }

    //just a handy way to get addresses:
    function whoami () public view returns (address){return msg.sender;}


/*
    function getBalanceOfThisContract() public view returns (uint) {
        //how to return the total balance locked in this contract???
        //return this.balance;
        return address(this).balance;
    }

    function checkCumulativeReceivedBalance() public view returns(uint256) {return(CumulativeReceivedBalance);}
    function checkCumulativePaidOutBalance() public view returns(uint256) {return(CumulativePaidOutBalance);}
    function checkContractNetBalance() public view returns(uint256) {return(CumulativeReceivedBalance-CumulativePaidOutBalance);}

    function checkPartner1CapitalAcct() public view returns(uint256) {return(Partner1CapitalAccount);}
    function checkPartner2CapitalAcct() public view returns(uint256) {return(Partner2CapitalAccount);}
*/


}
